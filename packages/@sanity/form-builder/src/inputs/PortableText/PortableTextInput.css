@import 'part:@sanity/base/theme/variables-style';

.root {
  display: block;
  position: relative;
  width: 100%;
  box-sizing: border-box;
  font-family: var(--block-editor-base-font-family);
  margin: 0;
  padding: 0;
}

.header {
  display: flex;
  background-color: var(--component-bg);
  border-bottom: 1px solid var(--hairline-color);

  @nest .fullscreenWrapper & {
    position: fixed;
    box-sizing: border-box;
    width: 100%;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1;
    border: 0;
  }
}

.toolbarContainer {
  min-width: 0;
  flex: 1;
  height: 41px;

  @nest .fullscreenWrapper & {
    height: 49px;
  }
}

.fullscreenButtonContainer {
  border-left: 1px solid var(--hairline-color);
  padding: var(--extra-small-padding);

  @nest .fullscreenWrapper & {
    padding: var(--small-padding);
  }
}

.editorBox {
  border: var(--input-border-size) solid var(--input-border-color);
  border-radius: var(--input-border-radius);
  overflow: hidden;

  @nest .root.readOnly &, .root.disabled & {
    background-color: var(--input-bg-disabled);
    color: var(--input-color-disabled);
  }

  @nest .root:not(.readOnly) & {
    @media (hover: hover) {
      @nest &:hover {
        box-shadow: var(--input-box-shadow--hover);
        border-color: var(--input-border-color-hover);
      }

      @nest .focus:not(.fullscreenWrapper) & {
        box-shadow: var(--input-box-shadow--focus);
        border-color: var(--input-border-color-focus);

        /* @todo: Make the focus BG compatible with the annotation gutter */
        /* background-color: var(--input-bg-focus); */
      }
    }
  }

  @nest .fullscreenWrapper & {
    border: 0;
  }
}

.fullscreenWrapper {
  position: fixed;
  top: 0;
  left: 0;
  z-index: var(--zindex-portal);
  background-color: var(--body-bg);
  margin-top: 49px;
}

.scrollContainer {
  composes: scrollY from 'part:@sanity/base/theme/layout/scrolling-style';
  display: block;
  height: 15rem;
  box-sizing: border-box;
  overflow-y: overlay;
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  @nest &.hasBlockExtras::after {
    content: '';
    position: absolute;
    box-sizing: border-box;
    width: var(--block-extras-width);
    background-color: var(--block-extras-background-color);
    border-left: 1px solid var(--block-extras-border-color);
    top: 1px;
    right: 1px;
    height: calc(100% - 2px);
    z-index: -1;
  }

  @nest .fullscreenWrapper & {
    top: 0;
    left: 0;
    display: flex;
    height: calc(100vh - 49px);
    width: 100vw;
    background-color: color(var(--body-bg) lightness(- 2%));
    background-image: unset;
    border: none;

    @nest &::before {
      display: none;
    }
  }
}

.editorWrapper {
  box-sizing: border-box;
  /* make it fill its parent */
  height: auto;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.fullscreen .editorWrapper {
  max-width: 640px;
  background-color: var(--input-bg);
  width: 100%;
  box-sizing: border-box;

  @media (--screen-medium) {
    margin: var(--extra-large-padding) auto;
  }
}

.root :not(.fullscreen) .editorWrapper {
  box-shadow: none;
}

.activeOnFocus {
  @nest & > h3 {
    margin: 0;
    padding: 0;
    text-transform: uppercase;
    margin-bottom: var(--small-padding);
  }

  @nest & > div {
    margin: 0;
    padding: 0;
    text-transform: uppercase;
    margin-bottom: var(--small-padding);
  }

  @nest & > button {
    margin-bottom: var(--small-padding);
  }
}

.shortcutHint {
  font-size: var(--font-size-xsmall);
  color: var(--text-muted);
}

.keyboardShortcut {
  font-size: var(--font-size-xsmall);
  opacity: var(--gray-light);
  text-transform: none;
}

.loading {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: #fff;
  z-index: 99999;
  opacity: 0.5;
}

/*
  The flex alignment here is to stretch the editor to
  fit its parrent, and to make the last child selectable for editing
*/

.editor {
  position: relative;
  box-sizing: border-box;
  font-family: var(--block-editor-base-font-family);
  width: 100%;
  min-height: 100%;
  margin: 0;
  padding: 0;
}

.editor.hasBlockExtras:not(.fullscreen) {
  padding-right: var(--block-extras-width);
}

/* Defaults for text blocks */

.editor > div > div[class~='pt-text-block'] + div[class~='pt-text-block'] {
  padding-top: var(--medium-padding);
}

/* spacing on block objects  */

.editor > div > div[class~='pt-object-block'] + div[class~='pt-object-block'] {
  padding-top: 0;
}

.editor > div > div[class~='pt-object-block'] + div[class~='pt-text-block'] {
  padding-top: var(--medium-padding);
}

.editor > div > div[class~='pt-text-block'] + div[class~='pt-object-block'] {
  padding-top: var(--medium-padding);
}

.editor > div > div[class~='pt-list-item'] + div[class~='pt-list-item'] {
  padding-top: var(--extra-small-padding);
}

/* All blocks */

.editor > div > * {
  position: relative;
  box-sizing: content-box;
  word-break: break-word;
  padding-left: var(--small-padding);
  padding-right: var(--small-padding);

  @media (--screen-medium) {
    padding-left: var(--medium-padding);
    padding-right: var(--medium-padding);
  }

  @nest .fullscreenWrapper & {
    padding-left: var(--small-padding);
    padding-right: var(--small-padding);

    @media (--screen-medium) {
      padding-left: var(--large-padding);
      padding-right: var(--large-padding);
    }

    @media (--screen-large) {
      padding-left: var(--extra-large-padding);
      padding-right: var(--extra-large-padding);
    }
  }
}

.editor > div > *:first-child {
  padding-top: var(--small-padding);

  @media (--screen-medium) {
    margin-top: var(--medium-padding);
  }

  @nest .fullscreenWrapper & {
    @media (--screen-medium) {
      margin-top: var(--large-padding);
    }

    @media (--screen-large) {
      margin-top: var(--extra-large-padding);
    }
  }
}

.editor > div {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 100%;
}

.editor > div > *:last-child {
  flex-grow: 1;

  @nest .fullscreenWrapper & {
    padding-bottom: 3rem;
  }
}

.blockExtras {
  position: relative;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  pointer-events: none;

  @nest .fullscreen & {
    padding-left: 0;
  }
}
